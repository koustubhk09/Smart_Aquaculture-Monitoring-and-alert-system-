#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <OneWire.h>
#include <DallasTemperature.h>

// === WiFi Credentials ===
const char* ssid = "REDMI K50I";
const char* password = "123456789";

// === DS18B20 Setup ===
#define ONE_WIRE_BUS D4
OneWire oneWire(ONE_WIRE_BUS);
DallasTemperature sensors(&oneWire);

// === LCD Setup ===
#define I2C_SDA D5
#define I2C_SCL D6
LiquidCrystal_I2C lcd(0x27, 16, 2);

// === Web Server ===
ESP8266WebServer server(80);

// === Sensor Pins ===
#define PH_SENSOR_PIN A0
#define TDS_SENSOR_PIN A0

// === Sensor Values ===
float temperature = 0.0;
float pHValue = 0.0;
float tdsValue = 0.0;

// === Thresholds ===
float tempMin = 18.0, tempMax = 30.0;
float phMin = 6.0, phMax = 7.5;
float tdsMin = 200, tdsMax = 500;

// === Admin ===
String adminUsername = "admin";
String adminPassword = "1234";
bool isLoggedIn = false;

// === History ===
float tempHistory[10], phHistory[10], tdsHistory[10];
int chartIndex = 0;

// === Helpers ===
String getArray(float* arr) {
  String result = "";
  for (int i = 0; i < 10; i++) {
    result += String(arr[i], 2);
    if (i < 9) result += ",";
  }
  return result;
}

String getCategory(float value, String sensor) {
  if (sensor == "temperature") {
    if (value < tempMin) return "low";
    if (value > tempMax) return "high";
  } else if (sensor == "pH") {
    if (value < phMin) return "low";
    if (value > phMax) return "high";
  } else if (sensor == "tds") {
    if (value < tdsMin) return "low";
    if (value > tdsMax) return "high";
  }
  return "normal";
}

// === Web Pages ===
void handleRoot() {
  String html = R"rawliteral(
<!DOCTYPE html><html><head><meta charset="UTF-8">
<title>IoT Dashboard</title>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<style>
  body { background-color: #f8f9fa; font-family: 'Segoe UI', sans-serif; }
  .card { margin: 10px; transition: 0.3s ease; }
  .high-alert { background-color: red; color: white; animation: pulse 1s infinite; }
  .normal { background-color: green; color: white; }
  .low-alert { background-color: yellow; color: black; }
  @keyframes pulse { 0% { background-color: red; } 50% { background-color: darkred; } 100% { background-color: red; } }
</style></head><body>
<div class="container mt-4">
  <h2 class="text-center mb-4">üå°Ô∏è IoT Sensor Dashboard</h2>
  <div class="row text-center">
    <div class="col-md-4"><div class="card" id="tempCard"><div class="card-body"><h5>Temperature</h5><h2 id="tempVal">-- ¬∞C</h2></div></div></div>
    <div class="col-md-4"><div class="card" id="phCard"><div class="card-body"><h5>pH Level</h5><h2 id="phVal">--</h2></div></div></div>
    <div class="col-md-4"><div class="card" id="tdsCard"><div class="card-body"><h5>TDS</h5><h2 id="tdsVal">-- ppm</h2></div></div></div>
  </div>
  <div class="row mt-4">
    <div class="col-md-4"><canvas id="tempChart"></canvas></div>
    <div class="col-md-4"><canvas id="phChart"></canvas></div>
    <div class="col-md-4"><canvas id="tdsChart"></canvas></div>
  </div>
  <div class="row mt-4">
    <div class="col-md-4">
      <h5>Temperature Bar Chart</h5>
      <canvas id="tempBarChart"></canvas>
    </div>
  </div>
  <hr><h4 class="text-center">üîê Admin Login</h4>
  <form action="/adminlogin" method="POST" class="row g-3 justify-content-center mb-4">
    <div class="col-auto"><input type="text" name="username" placeholder="Username" class="form-control" required></div>
    <div class="col-auto"><input type="password" name="password" placeholder="Password" class="form-control" required></div>
    <div class="col-auto"><button class="btn btn-primary" type="submit">Login</button></div>
  </form>
</div>

<script>
let tempChart, phChart, tdsChart, tempBarChart;

function createLineChart(ctx, label, borderColor, backgroundColor) {
  return new Chart(ctx, {
    type: 'line',
    data: {
      labels: Array(10).fill(''),
      datasets: [{
        label: label,
        data: [],
        borderColor: borderColor,
        backgroundColor: backgroundColor,
        borderWidth: 2,
        pointRadius: 4,
        pointHoverRadius: 6,
        tension: 0.4,
        fill: true
      }]
    },
    options: {
      responsive: true,
      animation: { duration: 500, easing: 'easeInOutQuad' },
      plugins: { legend: { display: true } },
      scales: {
        x: { title: { display: true, text: 'Sample Index' } },
        y: { beginAtZero: false, title: { display: true, text: label } }
      }
    }
  });
}

function createBarChart(ctx, label, borderColor, backgroundColor) {
  return new Chart(ctx, {
    type: 'bar',
    data: {
      labels: ['Temperature'],
      datasets: [{
        label: label,
        data: [0],  // Initial data will be 0, which will be updated later
        borderColor: borderColor,
        backgroundColor: backgroundColor,
        borderWidth: 2,
        tension: 0.4,
        fill: false
      }]
    },
    options: {
      responsive: true,
      animation: { duration: 500, easing: 'easeInOutQuad' },
      plugins: { legend: { display: false } },
      scales: {
        y: {
          min: -55,
          max: 125,
          title: { display: true, text: 'Temperature (¬∞C)' }
        }
      }
    }
  });
}

function initCharts() {
  tempChart = createLineChart(document.getElementById('tempChart'), 'Temperature (¬∞C)', 'rgba(255,99,132,1)', 'rgba(255,99,132,0.2)');
  phChart = createLineChart(document.getElementById('phChart'), 'pH Level', 'rgba(75,192,192,1)', 'rgba(75,192,192,0.2)');
  tdsChart = createLineChart(document.getElementById('tdsChart'), 'TDS (ppm)', 'rgba(54,162,235,1)', 'rgba(54,162,235,0.2)');
  tempBarChart = createBarChart(document.getElementById('tempBarChart'), 'Temperature (¬∞C)', 'rgba(255,99,132,1)', 'rgba(255,99,132,0.2)');
}

function updateCardStyle(id, category) {
  const card = document.getElementById(id);
  card.className = "card " + (category === "high" ? "high-alert" : category === "low" ? "low-alert" : "normal");
}

function fetchData() {
  fetch("/data").then(res => res.json()).then(data => {
    document.getElementById("tempVal").innerText = data.temperature.toFixed(1) + " ¬∞C";
    document.getElementById("phVal").innerText = data.pH.toFixed(2);
    document.getElementById("tdsVal").innerText = data.tds.toFixed(0) + " ppm";

    let labels = Array.from({ length: 10 }, (_, i) => `#${i + 1}`);
    tempChart.data.labels = phChart.data.labels = tdsChart.data.labels = labels;

    tempChart.data.datasets[0].data = data.tempHistory;
    phChart.data.datasets[0].data = data.phHistory;
    tdsChart.data.datasets[0].data = data.tdsHistory;

    updateCardStyle("tempCard", data.categories[0]);
    updateCardStyle("phCard", data.categories[1]);
    updateCardStyle("tdsCard", data.categories[2]);

    // Update the bar chart with the latest temperature
    tempBarChart.data.datasets[0].data = [data.temperature];  // Update the bar chart data
    tempBarChart.update();

    tempChart.update(); phChart.update(); tdsChart.update();
  });
}

initCharts();
setInterval(fetchData, 2000);
</script>
</body></html>
)rawliteral";
  server.send(200, "text/html", html);
}

void handleData() {
  String json = "{";
  json += "\"temperature\":" + String(temperature, 2) + ","; 
  json += "\"pH\":" + String(pHValue, 2) + ",";
  json += "\"tds\":" + String(tdsValue, 2) + ",";
  json += "\"tempHistory\":[" + getArray(tempHistory) + "],";
  json += "\"phHistory\":[" + getArray(phHistory) + "],";
  json += "\"tdsHistory\":[" + getArray(tdsHistory) + "],";
  json += "\"categories\":[\"" + getCategory(temperature, "temperature") + "\",\"" +
          getCategory(pHValue, "pH") + "\",\"" + getCategory(tdsValue, "tds") + "\"]";
  json += "}";
  server.send(200, "application/json", json);
}

void handleAdminLogin() {
  String username = server.arg("username");
  String password = server.arg("password");

  if (username == adminUsername && password == adminPassword) {
    isLoggedIn = true;
    server.sendHeader("Location", "/rangecontrol");
    server.send(302, "text/plain", "Redirecting...");
  } else {
    server.send(200, "text/html", "<h2>Login Failed</h2><p><a href='/'>Back</a></p>");
  }
}

void handleRangeControl() {
  if (!isLoggedIn) {
    server.send(403, "text/plain", "Access Denied");
    return;
  }
  String html = "<h2>Sensor Range Settings</h2><form action='/range' method='POST'>";
  html += "<label>Temp Min:</label><input name='tempMin' value='" + String(tempMin) + "'><br>";
  html += "<label>Temp Max:</label><input name='tempMax' value='" + String(tempMax) + "'><br>";
  html += "<label>pH Min:</label><input name='phMin' value='" + String(phMin) + "'><br>";
  html += "<label>pH Max:</label><input name='phMax' value='" + String(phMax) + "'><br>";
  html += "<label>TDS Min:</label><input name='tdsMin' value='" + String(tdsMin) + "'><br>";
  html += "<label>TDS Max:</label><input name='tdsMax' value='" + String(tdsMax) + "'><br>";
  html += "<input type='submit' value='Update'></form><p><a href='/'>‚¨Ö Back</a></p>";
  server.send(200, "text/html", html);
}

void handleRangeUpdate() {
  tempMin = server.arg("tempMin").toFloat();
  tempMax = server.arg("tempMax").toFloat();
  phMin = server.arg("phMin").toFloat();
  phMax = server.arg("phMax").toFloat();
  tdsMin = server.arg("tdsMin").toFloat();
  tdsMax = server.arg("tdsMax").toFloat();
  server.sendHeader("Location", "/");
  server.send(302, "text/plain", "Updated");
}

// === Setup & Loop ===
void setup() {
  Serial.begin(115200);
  Wire.begin(I2C_SDA, I2C_SCL);
  lcd.begin(16, 2);
  lcd.backlight();

  sensors.begin();
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) delay(500);

  lcd.clear();
  lcd.setCursor(0, 0); lcd.print("IP Address:");
  lcd.setCursor(0, 1); lcd.print(WiFi.localIP());
  delay(3000); lcd.clear();

  server.on("/", handleRoot);
  server.on("/data", handleData);
  server.on("/adminlogin", HTTP_POST, handleAdminLogin);
  server.on("/rangecontrol", handleRangeControl);
  server.on("/range", HTTP_POST, handleRangeUpdate);
  server.begin();
}

void loop() {
  sensors.requestTemperatures();
  temperature = sensors.getTempCByIndex(0);

  int rawPH = analogRead(PH_SENSOR_PIN);
  float voltagePH = rawPH * (3.3 / 1023.0);
  pHValue = (voltagePH - 0.3) * 14.0 / 3.0;

  int rawTDS = analogRead(TDS_SENSOR_PIN);
  float voltageTDS = rawTDS * (3.3 / 1023.0);
  tdsValue = voltageTDS * 500;

  tempHistory[chartIndex] = temperature;
  phHistory[chartIndex] = pHValue;
  tdsHistory[chartIndex] = tdsValue;
  chartIndex = (chartIndex + 1) % 10;

  lcd.clear();
  lcd.setCursor(0, 0); lcd.print("T:"); lcd.print(temperature, 1); lcd.print("C");
  lcd.setCursor(0, 1); lcd.print("pH:"); lcd.print(pHValue, 2);
  lcd.setCursor(8, 1); lcd.print("TDS:"); lcd.print(tdsValue, 0); lcd.print(" ppm");

  server.handleClient();
}
